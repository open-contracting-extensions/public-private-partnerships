#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Documentation build configuration file, created by
# sphinx-quickstart on Tue Mar 20 21:53:17 2018.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
# import os
# import sys
# sys.path.insert(0, os.path.abspath('.'))
import csv
import gettext
import glob
import json
import os
import shutil
import subprocess
from collections import OrderedDict

import standard_theme
from recommonmark.parser import CommonMarkParser
from recommonmark.transform import AutoStructify
from sphinxcontrib.opendataservices import AutoStructifyLowPriority

# -- General configuration ------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = ['sphinxcontrib.jsonschema', 'ocds_sphinx_directives', 'sphinxcontrib.opendataservices']

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.md'
source_parsers = {
    '.md': CommonMarkParser,
}

# The master toctree document.
master_doc = 'index'

# General information about the project.
project = 'Open Contracting Data Standard for Public Private Partnerships'
copyright = '2016-2017 Open Contracting Partnership'
author = 'Open Data Services / Open Contracting Partnership'

# The version info for the project you're documenting, acts as replacement for
# |version| and |release|, also used in various other places throughout the
# built documents.
#
# The short X.Y version.
version = '1.0'
# The full version, including alpha/beta/rc tags.
release = '1.0.rc'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This patterns also effect to html_static_path and html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# If true, `todo` and `todoList` produce output, else they produce nothing.
todo_include_todos = False


# -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'standard_theme'
html_theme_path = [standard_theme.get_html_theme_path()]

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['../schema', '_static', 'examples']


# -- Local configuration --------------------------------------------------

locale_dirs = ['../locale/', os.path.join(standard_theme.get_html_theme_path(), 'locale')]
gettext_compact = False

extension_registry_git_ref = 'master'

# Compile catalogs 'codelists.po' to 'codelists.mo' and 'schema.po' to 'schema.mo', so that translate_codelists.py and
# translate_schema.py can succeed for translations.
subprocess.run(['pybabel', 'compile', '--use-fuzzy', '-d', '../locale', '-D', 'ppp-schema'])
subprocess.run(['pybabel', 'compile', '--use-fuzzy', '-d', '../locale', '-D', 'ppp-codelists'])
subprocess.run(['pybabel', 'compile', '--use-fuzzy', '-d', '../locale', '-D', 'reference/codelists'])


# Derived from https://github.com/open-contracting/standard/blob/1.1-dev/standard/schema/utils/translate_schema.py
def translate_schema(language):
    name = 'ppp-release-schema.json'
    directory_name = '_static'

    if language == 'en':
        shutil.copy('../schema/' + name, directory_name)
        return

    print("Translating schema to language " + language)
    translator = gettext.translation('ppp-schema', '../locale/', languages=[language])

    def translate_data(data):
        for key, value in list(data.items()):
            if key in ('title', 'description') and isinstance(value, str):
                data[key] = translator.gettext(value)
            if isinstance(value, dict):
                translate_data(value)
    data = json.load(open('../schema/' + name), object_pairs_hook=OrderedDict)
    translate_data(data)
    if not os.path.exists(directory_name):
        os.makedirs(directory_name)
    json.dump(data, open(os.path.join(directory_name, name), 'w+'), indent=4, ensure_ascii=False)


# Derived from https://github.com/open-contracting/standard/blob/1.1-dev/standard/schema/utils/translate_codelists.py
def translate_codelists(language, codelists_dir, codelists_output_dir):
    fallback = (language == 'en')

    translator = gettext.translation('ppp-codelists', '../locale', languages=[language], fallback=fallback)

    if not os.path.exists(codelists_output_dir):
        os.makedirs(codelists_output_dir)

    def convert_fieldname(name):
        for heading in ('Title', 'Description', 'Extension'):
            if heading in name:
                return translator.gettext(heading)
        return translator.gettext(name)

    for file in glob.glob(codelists_dir + '/*.csv'):
        output_file = os.path.join(codelists_output_dir, file.split('/')[-1])
        with open(file) as csv_file, open(output_file, 'w+') as out_csv_file:
            dict_reader = csv.DictReader(csv_file)
            fieldnames = [convert_fieldname(fieldname) for fieldname in dict_reader.fieldnames]
            dict_writer = csv.DictWriter(out_csv_file, fieldnames)
            dict_writer.writeheader()

            for row in dict_reader:
                new_row = {}
                for key, value in row.items():
                    lower = key.lower()
                    if 'title' in lower or 'description' in lower or 'name' in lower or 'extension' in lower:
                        if value:
                            value = translator.gettext(value)
                    new_row[convert_fieldname(key)] = value
                dict_writer.writerow(new_row)


def setup(app):
    app.add_config_value('recommonmark_config', {
        'auto_toc_tree_section': 'Contents',
        'enable_eval_rst': True
        }, True)
    app.add_transform(AutoStructify)
    app.add_transform(AutoStructifyLowPriority)

    language = app.config.overrides.get('language', 'en')
    translate_schema(language)
    translate_codelists(language, '../compiledCodelists', '_static/codelists')
    translate_codelists(language, 'extensions/codelists', 'extensions/codelists_translated')
